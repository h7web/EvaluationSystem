@model StaffEvaluations.Models.CreateEditEvalViewModel

@{
    ViewBag.Title = "EditEval";

    var evaltypedesc = "";

    if (Model.eval.EvalCode == "BA")
    {
        evaltypedesc = "Academic Professional";
    }
    else if (Model.eval.EvalCode == "CA")
    {
        evaltypedesc = "Civil Service";
    }
    else if (Model.eval.EvalCode == "CC")
    {
        evaltypedesc = "Civil Service - Exempt";
    }
}

@using (Html.BeginForm())
{
    @Html.Hidden("Id", Model.eval.EvalId)
    @Html.Hidden("editmode", (string)TempData["editmode"])

    var highlight = "";
    var lsdate = Model.person.LibraryStartDate.AsDateTime().ToString("MM/dd/yyyy");
    var startdate = Model.eval.StartDate.ToString("MM/dd/yyyy");
    var subdate = Model.eval.SubmittedDate?.ToString("MM/dd/yyyy");
    var contdate = Model.eval.ContestedDate?.ToString("MM/dd/yyyy");
    var acceptdate = Model.eval.AcceptedDate?.ToString("MM/dd/yyyy");
    var compdate = Model.eval.CompleteDate?.ToString("MM/dd/yyyy");
    var processdate = Model.eval.ProcessedDate?.ToString("MM/dd/yyyy");

    var yr = Model.eval.Year - 1;

    <h2>@Model.eval.Year @evaltypedesc Performance Evaluation</h2>

    <p class="alert-info">
        @if (Model.sub == true)
        {
            @:This evaluation is completed, you now have the option to submit below.
        }
    </p>

    <p>
        <strong>@Model.person.name - @Model.person.banner_title</strong> <br />
        Library Start Date: @lsdate<br />
        Supervisor: @Model.super.name - @Model.super.banner_title<br />
    </p>
    <p>Review Period: January 1 @yr through December 31 @yr</p>
    <p>
        Date Started: @startdate (@Model.eval.EvaluatorNetid)<br />

        @if (Model.eval.SubmittedDate != null)
        {
            @:Date Submitted to Employee: @subdate (@Model.eval.EvaluatorNetid)<br />
        }
        @if (Model.eval.AcceptedDate != null)
        {
            @:Date Accepted: @acceptdate (@Model.eval.NetId)<br />
        }
        @if (Model.eval.ContestedDate != null)
        {
            @:Date Contested: @contdate (@Model.eval.NetId)<br />
        }
        @if (Model.eval.CompleteDate != null)
        {
            @:Date Completed: @compdate (@Model.eval.EvaluatorNetid)<br />
        }
        @if (Model.eval.ProcessedDate != null)
        {
            @:Date Received by HR: @compdate<br />
        }
        <br />
    </p>

    <ol>
        @foreach (StaffEvaluations.Models.Question q in Model.questions)
        {
            foreach (SelectListItem r in (List<SelectListItem>)ViewData["RatingList"])
            {
                if (r.Value == q.QuestionRating)
                {
                    r.Selected = true;
                }
                else
                {
                    r.Selected = false;
                }
            }
            if (q.highlight == "true" && (string)TempData["editmode"] == "check" && q.QuestionComment == null)
            {
                highlight = "lihighlight";
            }
            else
            {
                highlight = "";
            }
            <li class="@highlight">
                @Html.Hidden("Question.Index", q.Index)
                @Html.Hidden(q.namePrefix + "QuestionId", q.QuestionId)
                <div>
                    @Html.Raw(q.QuestionText)
                </div>
                <div>
                    <br />
                    @if (q.CommentOnly == false)
                    {
                        if (Model.eval.Status == "" || Model.eval.Status == "In-Work" || Model.eval.Status == "Deferred")
                        {
                            @Html.DropDownList(q.namePrefix + "QuestionRating", (List<SelectListItem>)ViewData["RatingList"])
                        }
                        else
                        {
                            @Html.DropDownList(q.namePrefix + "QuestionRating", (List<SelectListItem>)ViewData["RatingList"], new { @disabled = true, @style = "background-color:lightgray" })
                            @Html.Hidden(q.namePrefix + "QuestionRating", q.QuestionRating)
                        }
                    }
                </div>
                <div>

                    @if (q.CommentOnly == true) //if its Job Desc
                    {
                        if (Model.eval.Status == "In-Work") //in-work means super has it (1st time) submitted means employee has it
                        {
                            <textarea id="@(q.namePrefixId + "QuestionComment")" name="@(q.namePrefix + "QuestionComment")" cols="100" rows="40" style="max-width:none;" class="text-info wysiwyg">@q.QuestionComment</textarea>
                        }
                        else if (Model.eval.Status == "Accepted" && Model.eval.NetId != System.Web.HttpContext.Current.User.Identity.Name.Substring(5) || Model.eval.Status == "Contested" && Model.eval.Status == "Accepted" && Model.eval.NetId != System.Web.HttpContext.Current.User.Identity.Name.Substring(5))
                        //means sup has it (2nd time)
                        {
                            <textarea id="@(q.namePrefixId + "QuestionComment")" name="@(q.namePrefix + "QuestionComment")" cols="100" rows="40" style="max-width:none;" class="text-info wysiwyg">@q.QuestionComment</textarea>
                        }
                        else //otherwise read only
                        {
                            @Html.Raw(q.QuestionComment)
                        }

                    }
                    else//not job desc
                    {
                        <br /> @:Comments: <br />
                        if (Model.eval.Status == "In-Work") //not comment only and sup has it (1st time)
                        {
                            <textarea id="@(q.namePrefixId + "QuestionComment")" name="@(q.namePrefix + "QuestionComment")" cols="100" style="max-width:none;" class="text-info">@q.QuestionComment</textarea>
                        }
                        else //otherwise readonly
                        {
                            <textarea id="@(q.namePrefixId + "QuestionComment")" name="@(q.namePrefix + "QuestionComment")" readonly style="background-color:lightgray; max-width:none;" cols="100">@q.QuestionComment</textarea>
                        }
                    }

                </div>
                <br />
                <br />
            </li>
        }
    </ol>

    if (Model.eval.Status == "Submitted") //&& Model.eval.NetId == User.Identity.Name.Substring(5))
    {
        <div> Employee Comments:<br />@Html.TextArea("EmployeeComments", Model.eval.EmployeeComments, new { @style = "width:700px;max-width:none;" })</div>
        <br />
        <div><input type="submit" name="button" class="btn" value="Save" /></div>
    }
    else if (Model.eval.Status == "Accepted" || Model.eval.Status == "Contested")
    {
        <div>Employee Comments:<br />@Html.TextArea("EmployeeComments", Model.eval.EmployeeComments, new { @readonly = "readonly", @style = "background-color:lightgray;width:700px;max-width:none;" })</div>
        if (Model.eval.NetId != User.Identity.Name.Substring(5))
        {
            <div>Evaluator Comments:<br />@Html.TextArea("EvaluatorComments", Model.eval.EvaluatorComments, new { @style = "width:700px;max-width:none;" })</div>
        }
    }
    else if (Model.eval.Status == "Complete")
    {
        <div>Employee Comments:<br /> @Html.TextArea("EmployeeComments", Model.eval.EmployeeComments, new { @readonly = "readonly", @style = "background-color:lightgray;width:700px;max-width:none;" })</div>
        if (Model.eval.NetId != User.Identity.Name.Substring(5))
        {
            <br />
            <div>Evaluator Comments:<br /> @Html.TextArea("EvaluatorComments", Model.eval.EvaluatorComments, new { @readonly = "readonly", @style = "background-color:lightgray;width:700px;max-width:none;" })</div>
        }
    }
    <div>
        @if ((Model.eval.Status == "" || Model.eval.Status == "In-Work" || Model.eval.Status == "Deferred") && Model.eval.NetId != User.Identity.Name.Substring(5))
        {
            <input type="submit" name="button" value="Save" class="btn" />
            if (Model.sub == true)
            {
            <input type="submit" name="button" value="Submit" class="btn" />
            @:|
            @Html.ActionLink("Return to List", "Index")
            }
        }
        else if ((Model.eval.Status == "Accepted" || Model.eval.Status == "Contested") && Model.eval.NetId != User.Identity.Name.Substring(5))
        {
            <input type="submit" name="button" value="Complete" class="btn" onclick="confirm('Really Complete?\n\r No further comments can be added and the evaluation will be marked for processing by HR.')" />
        }

        @Html.ActionLink("Cancel", "Index", null, new { @class="btn btn-warning" })
    </div>
}


@section scripts {
    <script>tinymce.init({ selector: 'textarea.wysiwyg' });</script>
}

