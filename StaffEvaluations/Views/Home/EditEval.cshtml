@model StaffEvaluations.Models.CreateEditEvalViewModel

@{
    ViewBag.Title = "EditEval";

    var evaltypedesc = "";
    var showempc = "none";
    var showevc = "none";

    if (Model.eval.EvalCode == "BA")
    {
        evaltypedesc = "Academic Professional";
    }
    else if (Model.eval.EvalCode == "CA")
    {
        evaltypedesc = "Civil Service";
    }
    else if (Model.eval.EvalCode == "CC")
    {
        evaltypedesc = "Civil Service - Exempt";
    }

    if (Model.eval.Status == "In-Work")
    {
        if (Model.eval.ReturntoSupervisorNetid != null)
        {
            showempc = "read";
            showevc = "write";
        }
    }
    else if (Model.eval.Status == "Submitted")
    {
        showempc = "write";
        if (Model.eval.ReturntoEmployeeNetid != null)
        {
            showevc = "read";
        }
    }
    else if (Model.eval.Status == "Accepted" || Model.eval.Status == "Contested")
    {
        showempc = "read";
        showevc = "write";
    }
    else if (Model.eval.Status == "Complete" || Model.eval.Status == "Processed")
    {
        showempc = "read";
        showevc = "read";
    }
}

@using (Html.BeginForm())
{
    @Html.Hidden("Id", Model.eval.EvalId)
    @Html.Hidden("editmode", (string)TempData["editmode"])

    var highlight = "";
    var lsdate = Model.person.LibraryStartDate.AsDateTime().ToString("MM/dd/yyyy");
    var startdate = Model.eval.StartDate.ToString("MM/dd/yyyy");
    var subdate = Model.eval.SubmittedDate?.ToString("MM/dd/yyyy");
    var contdate = Model.eval.ContestedDate?.ToString("MM/dd/yyyy");
    var acceptdate = Model.eval.AcceptedDate?.ToString("MM/dd/yyyy");
    var compdate = Model.eval.CompleteDate?.ToString("MM/dd/yyyy");
    var processdate = Model.eval.ProcessedDate?.ToString("MM/dd/yyyy");

    var yr = Model.eval.Year - 1;

    <h2>@Model.eval.Year @evaltypedesc Performance Evaluation</h2>

    <p class="alert-info">
        @if (Model.hr == true)
        {
            @:This evaluation is displayed in read-only mode. Please masquerade as @Model.eval.EvaluatorName to edit.
        }
    </p>

    <p>
        <strong>@Model.eval.Name - @Model.eval.Title</strong> <br />
        Library Start Date: @lsdate<br />
        Supervisor: @Model.eval.EvaluatorName - @Model.eval.EvaluatorTitle<br />
    </p>
    <p>Review Period: January 1 @yr through December 31 @yr</p>
    <p>
        Date Started: @startdate (@Model.eval.EvaluatorNetid)<br />

        @if (Model.eval.SubmittedDate != null)
        {
            @:Date Submitted to Employee: @subdate (@Model.eval.EvaluatorNetid)<br />
        }
        @if (Model.eval.AcceptedDate != null)
        {
            @:Date Accepted: @acceptdate (@Model.eval.NetId)<br />
        }
        @if (Model.eval.ContestedDate != null)
        {
            @:Date Contested: @contdate (@Model.eval.NetId)<br />
        }
        @if (Model.eval.CompleteDate != null)
        {
            @:Date Submitted to HR: @compdate (@Model.eval.EvaluatorNetid)<br />
        }
        @if (Model.eval.ProcessedDate != null)
        {
            @:Date Processed by HR: @compdate<br />
        }
        <br />
    </p>

    <ol>
        @foreach (StaffEvaluations.Models.Question q in Model.questions)
        {
            foreach (SelectListItem r in (List<SelectListItem>)ViewData["RatingList"])
            {
                if (r.Value == q.QuestionRating)
                {
                    r.Selected = true;
                }
                else
                {
                    r.Selected = false;
                }
            }
            if (q.highlight == "true" && (string)TempData["editmode"] == "check" && q.QuestionComment == null)
            {
                highlight = "lihighlight";
            }
            else
            {
                highlight = "";
            }
            <li class="@highlight">
                @Html.Hidden("Question.Index", q.Index)
                @Html.Hidden(q.namePrefix + "QuestionId", q.QuestionId)
                <div>
                    @Html.Raw(q.QuestionText)
                </div>
                <div>
                    <br />
                    @if (q.CommentOnly == false)
                    {
                        if ((Model.eval.Status == "" || Model.eval.Status == "In-Work" || Model.eval.Status == "Deferred" ) && Model.hr != true)
                        {
                            @Html.DropDownList(q.namePrefix + "QuestionRating", (List<SelectListItem>)ViewData["RatingList"])
                        }
                        else
                        {
                            @Html.DropDownList(q.namePrefix + "QuestionRating", (List<SelectListItem>)ViewData["RatingList"], new { @disabled = true, @style = "background-color:lightgray" })
                            @Html.Hidden(q.namePrefix + "QuestionRating", q.QuestionRating)
                        }
                    }
                </div>
                <div>

                    @if (q.CommentOnly == true) //if its Job Desc
                        {
                        if (Model.eval.Status == "In-Work" && Model.hr != true) //in-work means super has it (1st time) submitted means employee has it
                        {
                            <textarea id="@(q.namePrefixId + "QuestionComment")" name="@(q.namePrefix + "QuestionComment")" cols="100" rows="40" style="max-width:none;" class="text-info wysiwyg">@q.QuestionComment</textarea>
                        }
                        else if ((Model.eval.Status == "Accepted" && Model.eval.NetId != System.Web.HttpContext.Current.User.Identity.Name.Substring(5) || Model.eval.Status == "Contested" && Model.eval.Status == "Accepted" && Model.eval.NetId != System.Web.HttpContext.Current.User.Identity.Name.Substring(5)) && Model.hr != true)
                        //means sup has it (2nd time)
                        {
                            <textarea id="@(q.namePrefixId + "QuestionComment")" name="@(q.namePrefix + "QuestionComment")" cols="100" rows="40" style="max-width:none;" class="text-info wysiwyg">@q.QuestionComment</textarea>
                    }
                        else //otherwise read only
                        {
                            @Html.Raw(q.QuestionComment)
                        }

                    }
                    else//not job desc
                    {
                        <br /> @:Comments: <br />
                        if (Model.eval.Status == "In-Work" && Model.hr != true) //not comment only and sup has it (1st time)
                        {
                            <textarea id="@(q.namePrefixId + "QuestionComment")" name="@(q.namePrefix + "QuestionComment")" cols="100" style="max-width:none;" class="text-info">@q.QuestionComment</textarea>
                        }
                        else //otherwise readonly
                        {
                            <textarea id="@(q.namePrefixId + "QuestionComment")" name="@(q.namePrefix + "QuestionComment")" readonly style="background-color:lightgray; max-width:none;" cols="100">@q.QuestionComment</textarea>
                    }
                    }

                </div>
                <br />
                <br />
            </li>
        }
    </ol>

    if (showempc == "write" && Model.hr != true)
    {
        <div> Employee Comments:<br />@Html.TextArea("EmployeeComments", Model.eval.EmployeeComments, new { @style = "width:700px;max-width:none;" })</div>
    }
    else if (showempc == "read")
    {
        <div>Employee Comments:<br />@Html.TextArea("EmployeeComments", Model.eval.EmployeeComments, new { @readonly = "readonly", @style = "background-color:lightgray;width:700px;max-width:none;" })</div>
    }
    if (showevc == "write" && Model.hr != true)
    {
        <div>Evaluator Comments:<br />@Html.TextArea("EvaluatorComments", Model.eval.EvaluatorComments, new { @style = "width:700px;max-width:none;" })</div>
    }
    else if (showevc == "read")
    {
        <div>Evaluator Comments:<br /> @Html.TextArea("EvaluatorComments", Model.eval.EvaluatorComments, new { @readonly = "readonly", @style = "background-color:lightgray;width:700px;max-width:none;" })</div>
    }

    <div>
        @if (((Model.eval.Status != "Complete" || Model.eval.Status != "Processed" || (Model.eval.Status == "Accepted") && Model.eval.NetId != User.Identity.Name.Substring(5)) || (Model.eval.Status == "Contested") && Model.eval.NetId != User.Identity.Name.Substring(5)) && Model.hr != true)
        {
            <input type="submit" name="button" value="Save" class="btn" />
            @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-warning" })
        }
    </div>
}


@section scripts {
    <script>tinymce.init({
    selector: 'textarea.wysiwyg',
    theme: 'modern',
    plugins: [
  'advlist autolink lists link image charmap print preview anchor textcolor',
  'searchreplace visualblocks code fullscreen',
  'insertdatetime media table contextmenu paste code help wordcount'
    ],
    toolbar1: 'formatselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent'
});
    
        $(function () {
            $("textarea").each(function () {
                $(this).height($(this)[0].scrollHeight);
            });
        });
     </script>
}

